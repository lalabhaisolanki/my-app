{"version":3,"sources":["app/utils/enums/routes.ts","app/utils/enums/http-status-codes.ts","app/pages/CountrySearch/index.tsx","app/services/http-service.ts","app/utils/constants/index.ts","app/services/country-service.ts","app/configs/index.ts","app/components/Country/CountryCard/index.tsx","app/components/Weather/WeatherInfoModal/index.tsx","app/services/weather-service.ts","app/pages/CountryList/index.tsx","app/components/Navbar/index.tsx","app/configs/theme/index.ts","app/App.tsx","reportWebVitals.ts","index.tsx"],"names":["Routes","HttpStatusCodes","useStyles","makeStyles","theme","paper","marginTop","spacing","display","flexDirection","alignItems","avatar","margin","backgroundColor","palette","secondary","main","form","width","submit","CountrySearch","classes","history","useHistory","useState","countryNameInput","setCountryNameInput","countrySearchRoute","Countries","Container","component","maxWidth","CssBaseline","className","noValidate","autoComplete","onSubmit","e","preventDefault","push","TextField","value","required","fullWidth","autoFocus","label","variant","onChange","target","Button","color","disabled","Boolean","type","httpClient","axios","interceptors","response","use","error","status","Unauthorized","BadRequest","InternalServerError","console","log","Promise","reject","countryHttpClient","create","baseURL","process","countryService","getByName","countryName","get","getAll","root","title","fontSize","media","height","centered","justifyContent","customCard","CountryCard","country","onClickWeatherCapitalButton","Card","CardActionArea","CardMedia","image","flag","name","Divider","CardContent","Typography","gutterBottom","capital","population","latlng","CardActions","onClick","size","minHeight","loader","closeButton","position","right","top","grey","centerContent","WeatherInfoModal","open","handleClose","capitalWeatherInfo","Dialog","onClose","aria-labelledby","DialogTitle","disableTypography","id","IconButton","aria-label","DialogContent","dividers","location","current","weather_icons","map","weatherIconUrl","Avatar","src","temperature","wind_speed","precip","DialogActions","weatherHttpClient","weatherService","getWeatherByCity","cityName","cardGrid","paddingTop","paddingBottom","CountryList","useParams","loading","setLoading","showWeatherInfoModal","setShowWeatherInfoModal","countries","setCountries","setCapitalWeatherInfo","handleGetCapitalWeatherInfo","currentCountry","a","result","data","getCountries","useEffect","Grid","container","CircularProgress","length","item","xs","sm","md","alpha2Code","toolbar","h5","Navbar","AppBar","Toolbar","appTheme","createTheme","typography","fontFamily","App","ThemeProvider","exact","path","Home","CountriesByName","to","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8eb324ef.chunk.js","sourcesContent":["export enum Routes {\n  Home = '/',\n  Countries = '/countries',\n  CountriesByName = '/countries/:countryName',\n}\n","export enum HttpStatusCodes {\n  Ok = 200,\n  BadRequest = 400,\n  Unauthorized = 401,\n  NotFound = 404,\n  InternalServerError = 500,\n}\n","import React, { useState } from 'react'\nimport TextField from '@material-ui/core/TextField'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Button from '@material-ui/core/Button'\nimport { useHistory } from 'react-router-dom'\nimport Container from '@material-ui/core/Container'\nimport { CssBaseline } from '@material-ui/core'\nimport { Routes } from 'app/utils/enums/routes'\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    marginTop: theme.spacing(8),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  },\n  form: {\n    width: '100%', // Fix IE 11 issue.\n    marginTop: theme.spacing(1),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}))\n\nconst CountrySearch: React.FC = () => {\n  const classes = useStyles()\n  const history = useHistory()\n  const [countryNameInput, setCountryNameInput] = useState<string>('')\n  const countrySearchRoute = `${Routes.Countries}/${countryNameInput}`\n  return (\n    <Container component=\"main\" maxWidth=\"xs\">\n      <CssBaseline />\n      <div className={classes.paper}>\n        <form\n          className={classes.form}\n          noValidate\n          autoComplete=\"off\"\n          onSubmit={(e) => {\n            e.preventDefault()\n            history.push(countrySearchRoute)\n          }}\n        >\n          <TextField\n            value={countryNameInput}\n            required\n            fullWidth\n            autoFocus\n            label=\"Enter Country\"\n            variant=\"outlined\"\n            onChange={(e) => setCountryNameInput(e.target.value)}\n          />\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            disabled={!Boolean(countryNameInput)}\n            type=\"submit\"\n            fullWidth\n            className={classes.submit}\n          >\n            Submit\n          </Button>\n        </form>\n      </div>\n    </Container>\n  )\n}\n\nexport default CountrySearch\n","import {\n  INTERNAL_SERVER_ERROR,\n  SOMETHING_WENT_WRONG,\n} from 'app/utils/constants'\nimport { HttpStatusCodes } from 'app/utils/enums/http-status-codes'\nimport axios, { AxiosError, AxiosResponse } from 'axios'\n\nconst httpClient = axios\n\nhttpClient.interceptors.response.use(\n  (response: AxiosResponse) => response,\n  (error: AxiosError) => {\n    switch (error.response?.status) {\n      case HttpStatusCodes.Unauthorized:\n      case HttpStatusCodes.BadRequest:\n        break\n      case HttpStatusCodes.InternalServerError:\n        if (process.env.NODE_ENV === 'development') {\n          console.log(INTERNAL_SERVER_ERROR)\n        } else {\n          console.log(SOMETHING_WENT_WRONG)\n        }\n        break\n      default:\n        break\n    }\n    return Promise.reject(error)\n  }\n)\n\nexport default httpClient\n","export const ERROR_FETCHING_WEATHER =\n  'Some error occurred while fetching weather!'\nexport const ERROR_FETCHING_COUNTRIES = 'No countries found!'\n\nexport const INTERNAL_SERVER_ERROR = 'Internal Server Error'\nexport const SOMETHING_WENT_WRONG = 'Something went wrong'\n","import { ICountry } from 'app/utils/interfaces/country'\r\nimport { AxiosResponse } from 'axios'\r\nimport httpClient from 'app/services/http-service'\r\nimport { COUNTRIES_API_BASE_URL } from 'app/configs'\r\n\r\nconst countryHttpClient = httpClient.create({\r\n  baseURL: COUNTRIES_API_BASE_URL,\r\n})\r\n\r\nconst getAll = (): Promise<AxiosResponse<ICountry[]>> =>\r\n  countryHttpClient.get(`/all`)\r\n\r\nconst getByName = (countryName: string): Promise<AxiosResponse<ICountry[]>> =>\r\n  countryHttpClient.get(`/name/${countryName}`)\r\n\r\nexport const countryService = {\r\n  getByName,\r\n  getAll,\r\n}\r\nexport default countryService\r\n","export const COUNTRIES_API_BASE_URL = process.env.REACT_APP_COUNTRY_API\r\nexport const WEATHER_API_BASE_URL = process.env.REACT_APP_WEATHER_API\r\nexport const WEATHER_API_ACCESS_KEY = process.env.REACT_APP_WEATHER_API_KEY\r\n","import { makeStyles } from '@material-ui/core/styles'\nimport Card from '@material-ui/core/Card'\nimport CardActions from '@material-ui/core/CardActions'\nimport CardContent from '@material-ui/core/CardContent'\nimport Button from '@material-ui/core/Button'\nimport Typography from '@material-ui/core/Typography'\nimport CardActionArea from '@material-ui/core/CardActionArea'\nimport CardMedia from '@material-ui/core/CardMedia'\nimport { ICountry } from 'app/utils/interfaces/country'\nimport Divider from '@material-ui/core/Divider'\n\nconst useStyles = makeStyles({\n  root: {\n    maxWidth: 275,\n  },\n  title: {\n    fontSize: 14,\n  },\n  media: {\n    height: 140,\n  },\n  centered: {\n    justifyContent: 'center',\n  },\n  customCard: {\n    display: 'flex',\n    height: 184,\n    flexDirection: 'column',\n    justifyContent: 'center',\n  },\n})\n\ninterface CountryCardProps {\n  country: ICountry\n  onClickWeatherCapitalButton: any\n}\n\nconst CountryCard = ({\n  country,\n  onClickWeatherCapitalButton,\n}: CountryCardProps) => {\n  const classes = useStyles()\n  return (\n    <Card className={classes.root}>\n      <CardActionArea>\n        <CardMedia\n          className={classes.media}\n          image={country.flag}\n          title={country.name}\n        />\n        <Divider />\n        <CardContent className={classes.customCard}>\n          <Typography gutterBottom variant=\"h6\">\n            {country.name}\n            <Typography variant=\"subtitle1\" component=\"p\" color=\"textSecondary\">\n              {country.capital}\n            </Typography>\n          </Typography>\n          <Typography variant=\"body1\" color=\"primary\" component=\"p\">\n            Population :{' '}\n            <Typography variant=\"body2\" component=\"span\" color=\"textSecondary\">\n              {country.population}\n            </Typography>\n          </Typography>\n          <Typography variant=\"body1\" color=\"primary\" component=\"p\">\n            Latitude, Longitude :{' '}\n            <Typography variant=\"body2\" component=\"span\" color=\"textSecondary\">\n              {country.latlng[0] + '°  ' + country.latlng[1] + '°'}\n            </Typography>\n          </Typography>\n        </CardContent>\n      </CardActionArea>\n      <Divider />\n      <CardActions className={classes.centered}>\n        <Button\n          onClick={onClickWeatherCapitalButton}\n          variant=\"contained\"\n          color=\"primary\"\n          size=\"small\"\n        >\n          Capital Weather\n        </Button>\n      </CardActions>\n    </Card>\n  )\n}\n\nexport default CountryCard\n","import React from 'react'\nimport Button from '@material-ui/core/Button'\nimport Dialog from '@material-ui/core/Dialog'\nimport Typography from '@material-ui/core/Typography'\nimport DialogTitle from '@material-ui/core/DialogTitle'\nimport DialogContent from '@material-ui/core/DialogContent'\nimport DialogActions from '@material-ui/core/DialogActions'\nimport { makeStyles, Theme } from '@material-ui/core'\nimport { ICapitalWeatherInfo } from 'app/utils/interfaces/weather'\nimport Avatar from '@material-ui/core/Avatar'\nimport IconButton from '@material-ui/core/IconButton'\nimport CloseIcon from '@material-ui/icons/Close'\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  root: {\n    maxWidth: 345,\n    minHeight: 200,\n    justifyContent: 'center',\n    alignItems: 'center',\n    margin: '10px auto',\n  },\n  loader: {\n    alignItems: 'center',\n    display: 'flex',\n    justifyContent: 'center',\n  },\n  closeButton: {\n    position: 'absolute',\n    right: theme.spacing(1),\n    top: theme.spacing(1),\n    color: theme.palette.grey[500],\n  },\n  centerContent: {\n    alignItems: 'center',\n    display: 'flex',\n    justifyContent: 'center',\n    flexDirection: 'column',\n  },\n}))\n\ninterface IWeatherInfoModalProps {\n  open: boolean\n  capitalWeatherInfo: ICapitalWeatherInfo\n  handleClose: () => void\n}\n\nconst WeatherInfoModal: React.FC<IWeatherInfoModalProps> = ({\n  open,\n  handleClose,\n  capitalWeatherInfo,\n}: IWeatherInfoModalProps) => {\n  const classes = useStyles()\n  return (\n    <Dialog\n      onClose={handleClose}\n      aria-labelledby=\"customized-dialog-title\"\n      open={open}\n      fullWidth={true}\n      maxWidth={'sm'}\n    >\n      <DialogTitle disableTypography id=\"customized-dialog-title\">\n        <Typography variant=\"h6\">Weather Information</Typography>\n        <IconButton\n          aria-label=\"close\"\n          className={classes.closeButton}\n          onClick={handleClose}\n        >\n          <CloseIcon />\n        </IconButton>\n      </DialogTitle>\n      <DialogContent dividers className={classes.centerContent}>\n        <Typography variant=\"h4\">\n          {capitalWeatherInfo?.location?.name}\n        </Typography>\n        {capitalWeatherInfo?.current?.weather_icons?.map(\n          (weatherIconUrl: string) => (\n            <Avatar variant=\"rounded\" src={weatherIconUrl} />\n          )\n        )}\n        <Typography variant=\"body1\" color=\"textSecondary\">\n          Temperature : {capitalWeatherInfo?.current?.temperature + '°'}\n        </Typography>\n        <Typography variant=\"body1\" color=\"textSecondary\">\n          Wind Speed : {capitalWeatherInfo?.current?.wind_speed} km/h\n        </Typography>\n        <Typography variant=\"body1\" color=\"textSecondary\">\n          Precipitation : {capitalWeatherInfo?.current?.precip} %\n        </Typography>\n      </DialogContent>\n      <DialogActions>\n        <Button\n          variant=\"contained\"\n          autoFocus\n          onClick={handleClose}\n          color=\"primary\"\n          className={classes.centerContent}\n        >\n          Close\n        </Button>\n      </DialogActions>\n    </Dialog>\n  )\n}\n\nexport default WeatherInfoModal\n","import { AxiosResponse } from 'axios'\r\nimport httpClient from 'app/services/http-service'\r\nimport { ICapitalWeatherInfo } from 'app/utils/interfaces/weather'\r\nimport { WEATHER_API_ACCESS_KEY, WEATHER_API_BASE_URL } from 'app/configs'\r\nexport const weatherHttpClient = httpClient.create({\r\n  baseURL: WEATHER_API_BASE_URL,\r\n})\r\n\r\nconst getWeatherByCity = (\r\n  cityName: string\r\n): Promise<AxiosResponse<ICapitalWeatherInfo>> =>\r\n  weatherHttpClient.get(\r\n    `/current?access_key=${WEATHER_API_ACCESS_KEY}&query=${cityName}`\r\n  )\r\n\r\nconst weatherService = {\r\n  getWeatherByCity,\r\n}\r\n\r\nexport default weatherService\r\n","import {\n  CircularProgress,\n  Container,\n  Grid,\n  makeStyles,\n  Typography,\n} from '@material-ui/core'\nimport countryService from 'app/services/country-service'\nimport { ICountry } from 'app/utils/interfaces/country'\nimport React, { useEffect, useState } from 'react'\nimport { useParams } from 'react-router'\nimport CountryCard from 'app/components/Country/CountryCard'\nimport {\n  ERROR_FETCHING_COUNTRIES,\n  ERROR_FETCHING_WEATHER,\n} from 'app/utils/constants'\nimport WeatherInfoModal from 'app/components/Weather/WeatherInfoModal'\nimport weatherService from 'app/services/weather-service'\nimport { ICapitalWeatherInfo } from 'app/utils/interfaces/weather'\n\nconst useStyles = makeStyles((theme) => ({\n  cardGrid: {\n    paddingTop: theme.spacing(8),\n    paddingBottom: theme.spacing(8),\n  },\n}))\n\nconst CountryList: React.FC = () => {\n  const classes = useStyles()\n  const { countryName } = useParams<{ countryName: string }>()\n  const [loading, setLoading] = useState(true)\n  const [showWeatherInfoModal, setShowWeatherInfoModal] = useState(false)\n  const [countries, setCountries] = useState<ICountry[]>([])\n  const [capitalWeatherInfo, setCapitalWeatherInfo] =\n    useState<ICapitalWeatherInfo>({} as ICapitalWeatherInfo)\n\n  const handleGetCapitalWeatherInfo = async (currentCountry: ICountry) => {\n    try {\n      const result = await weatherService.getWeatherByCity(\n        currentCountry.capital\n      )\n      if (result.data) {\n        setCapitalWeatherInfo(result.data)\n        setShowWeatherInfoModal(true)\n      }\n    } catch (e) {\n      console.log(ERROR_FETCHING_WEATHER)\n    } finally {\n    }\n  }\n\n  const handleClose = () => setShowWeatherInfoModal(false)\n\n  const getCountries = async () => {\n    try {\n      const result = await countryService.getByName(countryName)\n      if (result.data) {\n        setCountries(result.data)\n      }\n    } catch (e) {\n      console.log(e)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  useEffect(() => {\n    getCountries()\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n  return (\n    <Container className={classes.cardGrid} maxWidth=\"md\">\n      <Grid container spacing={4} justifyContent=\"center\">\n        {loading && <CircularProgress size={60} />}\n        {!loading && countries.length === 0 && (\n          <Typography gutterBottom variant=\"h6\">\n            {ERROR_FETCHING_COUNTRIES}\n          </Typography>\n        )}\n        {countries.map((country: ICountry) => {\n          return (\n            <Grid item key={country.alpha2Code} xs={12} sm={6} md={4}>\n              <CountryCard\n                country={country}\n                onClickWeatherCapitalButton={() =>\n                  handleGetCapitalWeatherInfo(country)\n                }\n              />\n            </Grid>\n          )\n        })}\n        <WeatherInfoModal\n          open={showWeatherInfoModal}\n          handleClose={handleClose}\n          capitalWeatherInfo={capitalWeatherInfo}\n        />\n      </Grid>\n    </Container>\n  )\n}\n\nexport default CountryList\n","import { AppBar, makeStyles, Toolbar, Typography } from '@material-ui/core'\n\nconst useStyles = makeStyles(() => ({\n  toolbar: {\n    margin: '0 auto',\n  },\n  h5: {\n    color: 'white',\n  },\n}))\n\nconst Navbar = () => {\n  const classes = useStyles()\n  return (\n    <AppBar position=\"static\">\n      <Toolbar className={classes.toolbar}>\n        <Typography variant=\"h5\" className={classes.h5}>\n          Country and Weather Info\n        </Typography>\n      </Toolbar>\n    </AppBar>\n  )\n}\n\nexport default Navbar\n","import { createTheme } from '@material-ui/core'\n\nconst appTheme = createTheme({\n  typography: {\n    fontFamily: 'Montserrat',\n  },\n})\n\nexport default appTheme\n","import React from 'react'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n} from 'react-router-dom'\nimport CountrySearch from 'app/pages/CountrySearch'\nimport CountryList from 'app/pages/CountryList'\nimport Navbar from 'app/components/Navbar'\nimport { Routes } from 'app/utils/enums/routes'\nimport { ThemeProvider } from '@material-ui/core'\nimport appTheme from 'app/configs/theme'\n\nconst App: React.FC = () => {\n  return (\n    <ThemeProvider theme={appTheme}>\n      <Router>\n        <Navbar />\n        <Switch>\n          <Route exact path={Routes.Home} component={CountrySearch} />\n          <Route exact path={Routes.CountriesByName} component={CountryList} />\n          <Redirect to={Routes.Home} />\n        </Switch>\n      </Router>\n    </ThemeProvider>\n  )\n}\nexport default App\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from 'app/App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}